
# SUPPORT VECTOR REGRESSION

#Importar librerias
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#Importar el dataset
dataset = pd.read_csv('Position_Salaries.csv')
X = dataset.iloc[:, 1:2].values
y = dataset.iloc[:, 2].values

#dividir el dataset en conjunto de entrenamiento y conjunto de testing
'''from sklearn.model_selection import train_test_split
X_train, X_test, y_train , y_test = train_test_split(X, y, test_size= 0.2, random_state= 0)'''

#Escalado de variables
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
sc_y = StandardScaler()
X = sc_X.fit_transform(X)
y = sc_y.fit_transform(y.reshape(-1,1))

#Ajustar la regresion con el dataset
from sklearn.svm import SVR
regression = SVR(kernel = 'rbf' )
regression.fit (X, y)



#Prediccion de nuestros modelos
y_pred = sc_y.inverse_transform(regression.predict(sc_X.transform(np.array([[6.5]]))))




#Visualizacion de los resultados del modelo polinomico
X_grid = np.arange(min(X), max(X), 0.1)
X_grid = X_grid.reshape(len(X_grid), 1)
plt.scatter(X, y, color = 'red')
plt.plot(X_grid, regression.predict((X_grid)), color = 'blue')
plt.title('Modelo de regresion (SVR)')
plt.xlabel('posicion del empleado')
plt.ylabel('sueldo en $')
plt.show()

# Visualización de los resultados del SVR (con valores intermedios y sin las variables escaladas)
X_2 = sc_X.inverse_transform(X)
y_2 = sc_y.inverse_transform(y)
X_grid = np.arange(min(X_2), max(X_2), 0.1)
X_grid = X_grid.reshape(-1, 1)
plt.scatter(X_2, y_2, color = "red")
plt.plot(X_grid, sc_y.inverse_transform(regression.predict(sc_X.transform(X_grid))), color = "blue")
plt.title("Modelo de Regresión (SVR) (con valores intermedios y sin las variables escaladas)")
plt.xlabel("Posición del empleado")
plt.ylabel("Sueldo (en $)")
plt.show()
