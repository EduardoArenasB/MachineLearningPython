#Regresión Polinómica

#Importar librerias
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


#Importar el dataset
dataset = pd.read_csv('Position_Salaries.csv')
X = dataset.iloc[:, 1:2].values
y = dataset.iloc[:, 2].values


#dividir el dataset en conjunto de entrenamiento y conjunto de testing
'''from sklearn.model_selection import train_test_split
X_train, X_test, y_train , y_test = train_test_split(X, y, test_size= 0.2, random_state= 0)'''

#Escalado de variables
'''from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)'''

#Ajustar la regresion Linea con el dataset
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X, y)

#Ajustar la regresion polinomica con el dataset
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree = 4)
X_poly = poly_reg.fit_transform(X)
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly, y)

#Visualizacion de los resultados del modelo lineal
plt.scatter(X, y, color = 'red')
plt.plot(X, lin_reg.predict(X), color = 'blue')
plt.title('Modelo de regresion Lineal')
plt.xlabel('posicion del empleado')
plt.ylabel('sueldo en $')
plt.show()

#Visualizacion de los resultados del modelo polinomico
X_grid = np.arange(min(X), max(X), 0.1)
X_grid = X_grid.reshape(len(X_grid), 1)
plt.scatter(X, y, color = 'red')
plt.plot(X_grid, lin_reg_2.predict(poly_reg.fit_transform(X_grid)), color = 'blue')
plt.title('Modelo de regresion Polinomial')
plt.xlabel('posicion del empleado')
plt.ylabel('sueldo en $')
plt.show()

#Prediccion de nuestros modelos
#Lineal
lin_reg.predict([[6.5]])
#Polinomica
lin_reg_2.predict(poly_reg.fit_transform([[6.5]]))
